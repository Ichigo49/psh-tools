# #########################################################################
#
#   NOM DU FICHIER : envexploit.ps1		UTILISATION : System\Exploit 
#
#	AUTEUR: M.Allegret (mathieu.allegret@)
#   DATE : 08/06/2015
#
#   BUT DE LA PROCEDURE :
#  	Initialisation des differentes variables 
#
# #########################################################################

if (!$exploit)
{

	$PshToolsVersion = "2.0"
	$ComputerName = $env:computername
	$SystemDrive = $env:SystemDrive
	$pslib = Join-Path $psdir "lib"
	$pstmp = Join-Path $SystemDrive "temp"
	$psbin = Join-Path $psdir "bin"
	$psfic = Join-Path $psdir "fic"
	$pslog = Join-Path $psdir "log"

	# Variables pour le systeme
	$journal = Join-Path $pslog "journal.log"
	$exploit = 1
	$OSlang = (Get-WmiObject Win32_OperatingSystem).oslanguage
	$OSver = (Get-WmiObject Win32_OperatingSystem).version
	$OSName = (Get-WmiObject Win32_OperatingSystem).caption
	$OSArchi = (Get-WmiObject Win32_OperatingSystem).OSarchitecture
	$PSver = $psversiontable.psversion.major
	
	function Pause {
		param (
			$Message = "Press any key to continue..."
		)
		
		Write-Host -NoNewLine $Message
		$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
		Write-Host ""
		
	}

	function setdate  {
		
		$Date = Get-Date
		$global:dd = "{0:dd}" -f $Date
		$global:mm = "{0:MM}" -f $Date
		$global:yy = "{0:yy}" -f $Date
		$global:yyyy = "{0:yyyy}" -f $Date
		$global:hh = "{0:HH}" -f $Date
		$global:mi = "{0:mm}" -f $Date
		$global:ss = "{0:ss}" -f $Date
		$global:ms = "{0:fff}" -f $Date
		$global:time = "{0:T}" -f $Date
		$global:ddmmyyyy = "$dd"+"$mm"+"$yyyy"
		$global:mmddyyyy = "$mm"+"$dd"+"$yyyy"
		$global:yyyymmdd = "$yyyy"+"$mm"+"$dd"
		$global:hhmmss = "$hh" + "$mi" + "$ss"
		$global:timesec = ([math]::floor([int] $hh * [int] 3600)) + ([math]::floor([int] $mi * [int] 60)) + ([int] $ss)
		$global:daynum = [Int] $Date.DayOfWeek
	
	}

	function rotation {
		param(
			[string]$file, 
			[int]$max
		)

		Remove-Item -Path $pslog\rotation.log -ErrorAction 0
		for ($i=$max; $i -ge 3; $i--) {
			$v1 = $i-1
			$v2 = $v1-1
			Move-Item -Path "$file-$v2" -Destination "$file-$v1" -force -ErrorAction 0 | Out-File $pslog\rotation.log -Append 
		}
		if($v2 -eq "1") {
			Move-Item -Path $file -Destination "$file-1" -ErrorAction 0 | Out-File $pslog\rotation.log -Append 
		}
	}

	function Test-IsElevatedUser {
		
		$IsElevatedUser = $false
		try {
			$WindowsIdentity = [Security.Principal.WindowsIdentity]::GetCurrent()
			$WindowsPrincipal = New-Object Security.Principal.WindowsPrincipal -ArgumentList $WindowsIdentity
			$IsElevatedUser =  $WindowsPrincipal.IsInRole( [Security.Principal.WindowsBuiltInRole]::Administrator )
		} catch {
			throw "Elevated privileges is undetermined; the error was: '{0}'." -f $_
		}
		$IsElevatedUser
		
	}

	function Get-ScriptDirectory {
		Split-Path $script:MyInvocation.MyCommand.Path
	}

	Function Start-Countdown {
		
		Param(
			[Int32]$Seconds = 10,
			[string]$Message = "Pausing for $Seconds seconds..."
		)
		
		ForEach ($Count in (1..$Seconds))
		{   
			Write-Progress -Id 1 -Activity $Message -Status "Waiting for $Seconds seconds, $($Seconds - $Count) seconds left" -PercentComplete (($Count / $Seconds) * 100)
			Start-Sleep -Seconds 1
		}
		Write-Progress -Id 1 -Activity $Message -Status "Completed" -PercentComplete 100 -Completed
		
	}
	
	Set-Alias count Start-Countdown
	
}
